buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "gt"
			url = "https://gregtech.overminddl1.com/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
	}
}

repositories {
	maven {
		name 'gt'
		url "https://gregtech.overminddl1.com/"
	}
}

apply plugin: 'forge'

// Bump this every new code update after a version release, even if not releasing yet, that
// way SNAPSHOT's work properly as something like `2.1.2-SNAPSHOT` orders before `2.1.2 in
// SEMVER that gradle uses.
group = "ganymedes01.etfuturum"
archivesBaseName = "Et_Futurum_Requiem"
version = "2.2.0"

sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.bootClasspath = org.gradle.internal.jvm.Jvm.current().getJre().getHomeDir().toString() +"/lib/rt.jar"
compileJava {
	options.encoding = "UTF-8"
}

dependencies {
	// Can use `compileOnly` instead of `compile` if you want to require it at build time,
	// but not require it in `runClient`/`runServer`
	compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
	compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
	compile "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
	compile "com.azanor.baubles:Baubles:1.7.10-1.0.1.10:deobf"
	compile "thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev"
    	compileOnly "team.chisel:Chisel:2.9.5.12:deobf"
    	compileOnly "team.chisel.ctmlib:CTMLib:MC1.7.10-1.4.1.5:deobf"
}

minecraft {
	version = "1.7.10-10.13.4.1614-1.7.10"
	runDir = "eclipse/assets"
	replaceIn 'reference.java'
	replace "@VERSION@", project.version
}

processResources {
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version': project.version, 'mcversion': project.minecraft.version
	 }

	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

jar {
	manifest {
		attributes(
			'FMLAT': "etfuturum_at.cfg",
		)
	}
}

task sourceJar(type: Jar) {
	manifest {}
	classifier = 'sources'
	from sourceSets.main.allSource
	exclude 'assets/**'
}

task devJar(type: Jar) {
	manifest {
		attributes(
			'FMLAT': 'etfuturum_at.cfg',
		)
	}
	classifier = 'dev'
	from sourceSets.main.output
}

artifacts {
	archives sourceJar, devJar
}


if (!hasProperty("mavenUsername")) {
	ext.mavenUsername="${System.getenv().MAVEN_USERNAME}"
}

if (!hasProperty("mavenPassword")) {
	ext.mavenPassword="${System.getenv().MAVEN_PASSWORD}"
}

if (!hasProperty("mavenURL")) {
	ext.mavenURL="${System.getenv().MAVEN_URL}"
}


uploadArchives {
	repositories {
		mavenDeployer {
			uniqueVersion = false
			repository(url: mavenURL) {
				authentication(userName: mavenUsername, password: mavenPassword)
			}
		}
	}
}

